package leetcode;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MalwareSpread2
{
	public static void main(String[] args)
	{
		MalwareSpread2 sol = new MalwareSpread2();
		int g[][] = new int[][] {{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1},{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0},{0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}};
		
		
		int in[] = new int[]{18,5,3,37,10,19};
		System.out.println("solution: "+sol.minMalwareSpread3(g, in));
		System.out.println("Actual solution: "+sol.minMalwareSpread4(g, in));
	}
	
	public int minMalwareSpread(int[][] g, int[] in) {
        int n = g.length;
        if(n==0){
            return 0;
        }
        
        int[] inf = new int[n];
        
        for(int i=0;i<in.length;i++){
            setInfected(g,inf,in[i],n);
        }
        
        System.out.println("infected array: "+arrayToStr(inf));
        
        int c[]=new int[n];
         for(int i=0;i<n;i++){
             if(inf[i]==1){
                 for(int j=0;j<n;j++){
                     if(g[i][j]==1 && j!=i && inf[j]==1){
                    	 System.out.println(i+","+j+" inf connection");
                         c[i]+=1;
                         System.out.println(i+" count:"+c[i]);
                     }
                 }
             }
        }
        
        System.out.println("count array: "+arrayToStr(c));
         
        int max = 0;
        int maxi = 0;
        for(int i=0;i<n;i++){
            if(c[i]>max){
                maxi=i;
                max=c[i];
            }
        }
        return maxi;
    }
    public void setInfected(int[][] g,int[] inf,int k,int n){
        if(inf[k]==0){
            inf[k]=1;
            for(int i=0;i<n;i++){
                if(g[k][i]==1) {
                    setInfected(g,inf,i,n);
                }
            }
        }
    }
    
    public String arrayToStr(int[] a) {
    	String str="";
    	for(int i:a) {
    		str+=i+",";
    	}
    	return str;
    }
    
    public int minMalwareSpread3(int[][] g, int[] in) {
        int n = g.length;
        if(n==0){
            return 0;
        }
        
        List<Map<Integer,Set<Integer>>> l = new ArrayList<>();
        Set<Integer> vis = new HashSet<>();
        Set<Integer> lv = new HashSet<>();
        
        Map<Integer,Set<Integer>> m = new HashMap<>();
        for(int i=0;i<in.length;i++){
            m.put(in[i],new HashSet());
            vis.add(in[i]);
            lv.add(in[i]);
        }
        l.add(m);
        System.out.println("Last Visted: "+lv);
        boolean added = true;
        
        while(added){
            added = false;
            Map<Integer,Set<Integer>> m2 = new HashMap<>();
            for(int i: lv){
                for(int j=0;j<n;j++){
                    if(!vis.contains(j) && g[i][j]==1){
                        added = true;
                        if(m2.get(j)==null){
                            Set<Integer> parents = new HashSet<>();
                            parents.add(i);
                            m2.put(j,parents);
                        }else{
                            m2.get(j).add(i);
                        }
                    }
                }
            }
            l.add(m2);
            vis.addAll(m2.keySet());
            lv = m2.keySet();
            System.out.println("Last Visted : "+lv);
        }
        int c[]=new int[n];
        for(int i=0;i<n;i++){
            Set<Integer> childs = new HashSet<>();
            boolean startCount = false;
            for(int j=0;j<l.size();j++){
                Map<Integer,Set<Integer>> m3 = l.get(j);
                if(m3.get(i)!=null){
                    startCount = true;
                    c[i]+=1;
                    continue;
                }
                if(startCount){
                    
                    for(int k:m3.keySet()){
                        Set<Integer> kparents = m3.get(k);
                        if(childs.containsAll(kparents) || (kparents.size()==1 && kparents.contains(i))){
                            childs.add(k);
                            c[i]+=1;
                        }
                    }
                }
            }
        }
        System.out.println("count array:"+arrayToStr(c));
        System.out.println("Visting map: "+l);
        System.out.println("Visited Set: "+vis);
        int max = -1;
        int maxi = 0;
        for(int i=0;i<n;i++){
            if(c[i]>max && vis.contains(i)){
                maxi=i;
                max=c[i];
            }
        }
        return maxi;
    }
    
    public int minMalwareSpread4(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        
        Set<Integer> set = new HashSet<>();
        for(int n : initial)
            set.add(n);
        
        int max = -1, ret = -1;
        for(int n : initial){
            int save = 0;
            Set<Integer> visited = new HashSet<>();
            visited.add(n);
            for(int i = 0; i<graph.length; i++){
                if(i != n && graph[n][i] == 1){
                    int temp = dfs(i, visited, set, graph);
                    if(temp < 0) continue; // encountered malware during exploration
                    save += temp;
                }
            }
            if(save > max){ 
                ret = n;
                max = save;
            }
        }
        return ret;
    }
    
    private int dfs(int n, Set<Integer> visited, Set<Integer> mal, int[][] graph){
        if(visited.contains(n)) return 0;
        if(mal.contains(n)) return -1;
        visited.add(n);
        
        int ret = 1; // current node saved (at least for now)
        for(int i = 0; i<graph.length; i++){
            if(i != n && graph[n][i] == 1){
                int temp = dfs(i, visited, mal, graph);
                if(temp == -1) {
                    mal.add(n); // has neighbor malware, marked as malware as well
                    return -1;
                }
                ret += temp;
            }
        }
        return ret;
    }

}
